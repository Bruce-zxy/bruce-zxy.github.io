                                                                                                                           [{"url":"/2018/06/25/CentOS 7上安装配置Nginx/","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1\">一、预备工作</a><ul>\n<li><a href=\"#1.1\">1.1 gcc 安装</a></li>\n<li><a href=\"#1.2\">1.2 PCRE pcre-devel 安装</a></li>\n<li><a href=\"#1.3\">1.3 zlib 安装</a></li>\n<li><a href=\"#1.4\">1.4 OpenSSL 安装</a></li>\n</ul>\n</li>\n<li><a href=\"#2\">二、下载、安装以及配置Nginx服务</a><ul>\n<li><a href=\"#2.1\">2.1 Nginx 下载</a></li>\n<li><a href=\"#2.2\">2.2 Nginx 安装包解压</a></li>\n<li><a href=\"#2.3\">2.3 Nginx 配置</a></li>\n<li><a href=\"#2.4\">2.4 Nginx 编译安装</a></li>\n<li><a href=\"#2.5\">2.5 Nginx 添加进环境变量</a></li>\n<li><a href=\"#2.6\">2.6 Nginx 服务启动与停止</a></li>\n<li><a href=\"#2.7\">2.7 Nginx 开机自启动</a></li>\n</ul>\n</li>\n<li><a href=\"#3\">三、自签名证书配置HTTPS</a><ul>\n<li><a href=\"#3.1\">3.1 创建服务器证书密钥文件</a></li>\n<li><a href=\"#3.2\">3.2 创建服务器证书的申请文件</a></li>\n<li><a href=\"#3.3\">3.3 备份服务器密钥文件</a></li>\n<li><a href=\"#3.4\">3.4 删除密钥文件保护密码</a></li>\n<li><a href=\"#3.5\">3.5 生成证书文件</a></li>\n<li><a href=\"#3.6\">3.6 配置Nginx的ssl模块</a></li>\n<li><a href=\"#3.7\">3.7 修改本地hosts文件</a></li>\n</ul>\n</li>\n<li><a href=\"#4\">四、Nginx 设置HTTP、HTTPS二级域名</a><ul>\n<li><a href=\"#4.1\">4.1 设置HTTP二级域名</a></li>\n<li><a href=\"#4.2\">4.2 设置HTTP二级域名</a></li>\n<li><a href=\"#4.3\">4.3 本地二级域名配置注意事项</a></li>\n</ul>\n</li>\n<li><a href=\"#5\">五、Nginx 设置反向代理服务至二级域名下</a></li>\n</ul>\n<h2 id=\"一、预备工作\"><a href=\"#一、预备工作\" class=\"headerlink\" title=\"一、预备工作\"></a><span id=\"1\">一、预备工作</span></h2><p><strong><span id=\"1.1\">1.1 gcc 安装</span></strong></p>\n<p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：</p>\n<pre><code>yum install gcc-c++\n</code></pre><p><strong><span id=\"1.2\">1.2 PCRE pcre-devel 安装</span></strong></p>\n<p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令：</p>\n<pre><code>yum install -y pcre pcre-devel\n</code></pre><p><strong><span id=\"1.3\">1.3 zlib 安装</span></strong></p>\n<p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</p>\n<pre><code>yum install -y zlib zlib-devel\n</code></pre><p><strong><span id=\"1.4\">1.4 OpenSSL 安装</span></strong></p>\n<p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。</p>\n<pre><code>yum install -y openssl openssl-devel\n</code></pre><h2 id=\"二、下载、安装以及配置Nginx服务\"><a href=\"#二、下载、安装以及配置Nginx服务\" class=\"headerlink\" title=\"二、下载、安装以及配置Nginx服务\"></a><span id=\"2\">二、下载、安装以及配置Nginx服务</span></h2><p><strong><span id=\"2.1\">2.1 Nginx 下载</span></strong></p>\n<p>到<a href=\"https://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">Nginx官网</a>寻找需要下载的tar.gz安装包的链接地址，</p>\n<p><img src=\"https://i.imgur.com/9MFw49G.png\" alt=\"Nginx官网下载列表\"></p>\n<p>使用wget命令下载：</p>\n<pre><code>wget -c https://nginx.org/download/nginx-1.10.3.tar.gz\n</code></pre><p><strong><span id=\"2.2\">2.2 Nginx 安装包解压</span></strong></p>\n<pre><code>tar -zxvf nginx-1.10.3.tar.gz\ncd nginx-1.10.3\n</code></pre><p><strong><span id=\"2.3\">2.3 Nginx 配置</span></strong></p>\n<p>在标准配置安装以外，我们需要开启 <strong>http_ssl_module</strong> 以及 <strong>http_gzip_static_module</strong> 两个模块来开启 https 服务以及 encoding-gzip 传输</p>\n<pre><code>./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_gzip_static_module\n</code></pre><p><strong><span id=\"2.4\">2.4 Nginx 编译安装</span></strong></p>\n<pre><code>make\nmake install\n</code></pre><p>命令执行完成后会默认安装在 <strong>/usr/local/nginx</strong> 中</p>\n<p>或者执行以下命令查找 Nginx 所在文件夹：</p>\n<pre><code>whereis nginx\n</code></pre><p><img src=\"https://i.imgur.com/pzDPXGv.png\" alt=\"whereis nginx\"></p>\n<p><strong><span id=\"2.5\">2.5 Nginx 添加进环境变量</span></strong></p>\n<p>如果上一步提示 nginx 不是一个命令，那就在这一步将 nginx 添加进环境变量中：</p>\n<pre><code>vim /etc/profile\n</code></pre><p>在最后一行加上：</p>\n<pre><code>export PATH=/usr/local/nginx/sbin:$PATH\n</code></pre><p><img src=\"https://i.imgur.com/YV1ZWi2.png\" alt=\"环境变量\"></p>\n<p>此时再次执行nginx将不会报找不到命令了</p>\n<p><strong><span id=\"2.6\">2.6 Nginx 服务启动与停止</span></strong></p>\n<p>服务命令简介：</p>\n<pre><code>nginx                 # 启动服务\nnginx -s quit        # 退出服务，此方式停止步骤是待nginx进程处理任务完毕进行停止\nnginx -s stop        # 停止服务，此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程\nnginx -s reload        # 重载服务\n</code></pre><p>服务<strong>停止操作流程</strong>：</p>\n<pre><code>nginx                # 先开启服务\nnginx -s quit        # 停止服务前先退出服务\nnginx -s stop        # 再停止服务\n</code></pre><p>服务<strong>重启操作流程</strong>：</p>\n<pre><code>nginx                # 先开启服务\nnginx -s quit        # 重启服务前先退出服务\nnginx                # 最后重启服务\n</code></pre><p>服务<strong>重载操作流程</strong>：</p>\n<pre><code>nginx -s reload        # 当 nginx 的配置文件 nginx.conf 被修改后，要想让配置生效需要重启 nginx，使用-s reload不用先停止再启动即可将配置信息在 nginx 中生效\n</code></pre><p>查询nginx进程：</p>\n<pre><code>ps aux|grep nginx\n</code></pre><p><strong><span id=\"2.7\">2.7 Nginx 开机自启动</span></strong></p>\n<p>在 <strong>/etc/rc.local</strong> 中增加启动代码即可：</p>\n<pre><code>vi /etc/rc.local\n</code></pre><p>在文本末尾增加一行 <strong>/usr/local/nginx/sbin/nginx</strong></p>\n<p><img src=\"https://i.imgur.com/R8KxcmA.png\" alt=\"开机自启动\"></p>\n<blockquote>\n<p><em>参考链接：<a href=\"https://www.linuxidc.com/Linux/2016-09/134907.htm\" target=\"_blank\" rel=\"noopener\">CentOS 7 下安装 Nginx</a></em></p>\n</blockquote>\n<h2 id=\"三、自签名证书配置HTTPS\"><a href=\"#三、自签名证书配置HTTPS\" class=\"headerlink\" title=\"三、自签名证书配置HTTPS\"></a><span id=\"3\">三、自签名证书配置HTTPS</span></h2><p><strong><span id=\"3.1\">3.1 创建服务器证书密钥文件</span></strong></p>\n<pre><code>[root@CentOS ~]# cd /usr/local/nginx/conf &amp;&amp; mkdir -p ssl &amp;&amp; cd ssl\n[root@CentOS ssl]# openssl genrsa -des3 -out ca.key 1024\n</code></pre><p>然后填写密钥保护密码：</p>\n<pre><code>Enter PEM pass phrase:                        # 输入密钥保护密码\nVerifying - Enter PEM pass phrase:            # 确认密钥保护密码\n</code></pre><p>回车结束</p>\n<p><strong><span id=\"3.2\">3.2 创建服务器证书的申请文件</span></strong></p>\n<pre><code>[root@CentOS ssl]# openssl req -new -key ca.key -out ca.csr\nEnter pass phrase for root.key:                                                 # 输入前面创建的密码 \nCountry Name (2 letter code) [AU]:CN                                             # 国家代号，中国输入CN \nState or Province Name (full name) [Some-State]:BeiJing                         # 省的全名，拼音 \nLocality Name (eg, city) []:BeiJing                                             # 市的全名，拼音 \nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:MyCompany Corp.         # 公司英文名 \nOrganizational Unit Name (eg, section) []:                                         # 可以不输入 \nCommon Name (eg, YOUR name) []:                                                 # 此时不输入 \nEmail Address []:admin@mycompany.com                                             # 电子邮箱，可随意填\nPlease enter the following ‘extra’ attributes \nto be sent with your certificate request \nA challenge password []:                                                         # 可以不输入 \nAn optional company name []:                                                     # 可以不输入\n</code></pre><p><strong><span id=\"3.3\">3.3 备份服务器密钥文件</span></strong></p>\n<pre><code>[root@CentOS ssl]# cp ca.key ca.key.backup\n</code></pre><p><strong><span id=\"3.4\">3.4 删除密钥文件保护密码</span></strong></p>\n<pre><code>[root@CentOS ssl]# openssl rsa -in ca.key.backup -out ca.key\n</code></pre><p><strong><span id=\"3.5\">3.5 生成证书文件</span></strong></p>\n<pre><code>[root@CentOS ssl]# openssl x509 -req -days 365 -in ca.csr -signkey ca.key -out ca.crt\n</code></pre><p><strong><span id=\"3.6\">3.6 配置Nginx的ssl模块</span></strong></p>\n<p>修改 Nginx 服务下的 nginx.conf</p>\n<pre><code>[root@CentOS ~]# vi /usr/local/nginx/conf/nginx.conf\n</code></pre><p>然后在 # HTTPS server 下将原有的 server 修改如下：</p>\n<pre><code>server {\n    listen       443 default ssl;\n    server_name  zxy.com;\n\n    ssl     on;\n\n    ssl_certificate      /home/yg-zxy/ssl-file/ssl-30-server.crt;\n    ssl_certificate_key  /home/yg-zxy/ssl-file/ssl-30-server.key;\n\n    location / {\n        root   html;\n        index  index.html index.htm;\n    }\n}\n</code></pre><p><strong><em>Tips：</em></strong></p>\n<p><strong>listen:</strong> 设置ssl监听端口，默认设置443即可，default可以省略</p>\n<p><strong>server_name:</strong> 设置服务器域名，这里配合接下来介绍到的修改hosts文件可以做到通过域名访问，域名随意设置，比如 <strong>zxy.com</strong></p>\n<p><strong>ssl:</strong> 开启ssl模块</p>\n<p><strong>ssl_certificate:</strong> 证书、公钥，需要发送到客户端的</p>\n<p><strong>ssl_certificate_key:</strong> 私钥</p>\n<p><strong>location:</strong> 服务器路由匹配配置</p>\n<p><strong><span id=\"3.7\">3.7 修改本地hosts文件</span></strong></p>\n<p>ssl证书设置好了，但是想要验证https能不能访问则得需要域名才行。</p>\n<p>当然我们不一定真的要去买一个域名来验证，可以通过修改本地hosts文件的方式来拦截、修改本地的域名解析过程：</p>\n<p><strong>Windows平台：</strong></p>\n<pre><code>attrib -R C:\\WINDOWS\\system32\\drivers\\etc\\hosts\n@echo 127.0.0.1 zxy.com &gt;&gt;C:\\WINDOWS\\system32\\drivers\\etc\\hosts\n@echo 127.0.0.1 www.zxy.com &gt;&gt;C:\\WINDOWS\\system32\\drivers\\etc\\hosts\n</code></pre><p>在本地新建一个文本文档，然后将这两行代码复制到文本文档中，另存为 <strong>changeHosts.bat</strong></p>\n<p>然后双击（可能需要右击管理员权限运行）执行 <strong>changeHosts.bat</strong> 文件</p>\n<p>等到CMD窗口执行完成以后，即可在浏览器访问 <a href=\"https://zxy.com\" title=\"https://zxy.com\" target=\"_blank\" rel=\"noopener\">https://zxy.com</a></p>\n<p><strong>Linux平台：</strong></p>\n<p><em>root用户：</em></p>\n<pre><code>[root@CentOS ~]# vi /etc/hosts\n</code></pre><p><em>非root用户：</em></p>\n<pre><code>[user@CentOS ~]# sudo vi /etc/hosts\n[sudo] password for user:                    # 输入当前用户的密码\n</code></pre><p>然后在文末添加一行： <strong>127.0.0.1 zxy.com</strong></p>\n<pre><code>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n\n127.0.0.1   zxy.com\n127.0.0.1    www.zxy.com\n</code></pre><p>保存然后退出</p>\n<blockquote>\n<p><strong>Tips: 修改host的操作一定要在访问的主机上进行，而不是被访问的服务器上进行</strong></p>\n</blockquote>\n<p><strong>在本地（浏览器）访问 <a href=\"https://zxy.com\" title=\"https://zxy.com\" target=\"_blank\" rel=\"noopener\">https://zxy.com</a> 时会遇到如下问题：</strong></p>\n<p><img src=\"https://i.imgur.com/vd0x2Zx.png\" alt=\"证书不安全\"></p>\n<p>提示你访问的地址不安全，这是因为我们的ssl证书是我们自己创建的，并未经过任何可信的第三方认证。所以浏览器会告诉用户，这个证书是未经可信第三方认证的证书，会有风险。但是在正式的公网环境中，我们肯定是需要取得可信第三方认证的DV或者EV证书的</p>\n<p>我们点击“高级”，继续点击“<a href=\"https://zxy.com\" target=\"_blank\" rel=\"noopener\">继续前往zxy.com（不安全）</a>”即可</p>\n<p><img src=\"https://i.imgur.com/WKPr9kT.png\" alt=\"继续访问\"></p>\n<blockquote>\n<p><em>参考链接：<a href=\"https://www.cnblogs.com/eaglezb/p/6074811.html\" target=\"_blank\" rel=\"noopener\">Nginx配置 HTTPS 证书网站</a></em></p>\n</blockquote>\n<h2 id=\"四、Nginx-设置HTTP、HTTPS二级域名\"><a href=\"#四、Nginx-设置HTTP、HTTPS二级域名\" class=\"headerlink\" title=\"四、Nginx 设置HTTP、HTTPS二级域名\"></a><span id=\"4\">四、Nginx 设置HTTP、HTTPS二级域名</span></h2><p><strong><span id=\"4\">4.1 设置HTTP二级域名</span></strong></p>\n<p>修改 Nginx 服务下的 nginx.conf</p>\n<pre><code>[root@CentOS ~]# vi /usr/local/nginx/conf/nginx.conf\n</code></pre><p>将http中server的内容：</p>\n<pre><code>server {\n    listen 80;\n    server_name zxy.com;\n\n    location / {\n        root   html;\n        index  index.html index.htm;\n    }\n}\n</code></pre><p>修改为二级域名正则通配形式：</p>\n<pre><code>server {\n    listen 80;\n    server_name zxy.com;\n\n    if ( $host ~* (\\b(?!www\\b)\\w+)\\.\\w+\\.\\w+ ) {\n        set $subdomain /$1;\n    }\n    location / {\n        root html$subdomain;\n        index index.html index.htm;\n    }\n}\n</code></pre><p>以这种方式配置二级域名的好处就是不需要再单独配置其他二级域名了，只需要在 <strong>/usr/local/nginx/html</strong> 下创建响应的文件夹即可访问相应的二级域名。</p>\n<p>检测 Nginx 服务配置是否正确：</p>\n<pre><code>[root@CentOS ~]# nginx -t\nnginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok\nnginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful\n</code></pre><p>然后重载 Nginx 服务：</p>\n<pre><code>[root@CentOS ~]# nginx -s reload\n</code></pre><p>创建二级域名所属的文件夹（需要root权限）：</p>\n<pre><code>[root@CentOS ~]# cd /usr/local/nginx/html &amp;&amp; mkdir -p test &amp;&amp; cd test\n[root@CentOS test]# vi index.html\n</code></pre><p>给首页文件输入内容：</p>\n<pre><code>Hello! This is a test page!\n</code></pre><p>保存并退出</p>\n<p>这时访问 <a href=\"http://test.zxy.com\" title=\"http://test.zxy.com\" target=\"_blank\" rel=\"noopener\">http://test.zxy.com</a> 即可看到刚刚编写的内容</p>\n<p><img src=\"https://i.imgur.com/MfzspQ3.png\" alt=\"访问test二级域名\"></p>\n<p>如果我们需要配置另一个二级域名 <a href=\"http://second.zxy.co\" title=\"http://second.zxy.com\" target=\"_blank\" rel=\"noopener\">http://second.zxy.com</a> 的话，可以直接在 html 文件夹中创建相应的二级域名所属文件夹：</p>\n<pre><code>[root@CentOS test]# cd /usr/local/nginx/html &amp;&amp; mkdir -p second &amp;&amp; cd second\n[root@CentOS second]# vi index.html\nHello! This is second subdomain!\n</code></pre><p>保存并退出</p>\n<p>这时访问 <a href=\"http://second.zxy.com\" title=\"http://second.zxy.com\" target=\"_blank\" rel=\"noopener\">http://second.zxy.com</a> 即可看到新域名下的内容</p>\n<blockquote>\n<p>*如有问题请参考：<strong><a href=\"#4.3\">4.3 本地二级域名配置注意事项</a></strong></p>\n</blockquote>\n<p><strong><span id=\"4.2\">4.2 设置HTTP二级域名</span></strong></p>\n<p>修改 Nginx 服务下的 nginx.conf</p>\n<pre><code>[root@CentOS ~]# vi /usr/local/nginx/conf/nginx.conf\n</code></pre><p>将我们在 <a href=\"#3.6\">3.6 配置Nginx的ssl模块</a> 中配置的内容修改为如下配置：</p>\n<pre><code>server {\n    listen       443 default ssl;\n    server_name  zxy.com;\n\n    ssl     on;\n\n    ssl_certificate      /home/yg-zxy/ssl-file/ssl-30-server.crt;\n    ssl_certificate_key  /home/yg-zxy/ssl-file/ssl-30-server.key;\n\n    if ( $host ~* (\\b(?!www\\b)\\w+)\\.\\w+\\.\\w+ ) {\n        set $subdomain $1;\n    }\n\n    location / {\n        root   html/$subdomain;\n        index  index.html index.htm;\n    }\n}\n</code></pre><p>保存并退出</p>\n<p>这时访问 <a href=\"https://test.zxy.com\" title=\"https://test.zxy.com\" target=\"_blank\" rel=\"noopener\">https://test.zxy.com</a> 以及 <a href=\"https://second.zxy.com\" title=\"https://second.zxy.com\" target=\"_blank\" rel=\"noopener\">https://second.zxy.com</a> 即可看到HTTPS域名下的内容</p>\n<blockquote>\n<p>*如有问题请参考：<strong><a href=\"#4.3\">4.3 本地二级域名配置注意事项</a></strong></p>\n</blockquote>\n<p><strong><span id=\"4.3\">4.3 本地二级域名配置注意事项</span></strong></p>\n<p><strong><em>注意！！！</em></strong></p>\n<p><strong>有可能在访问 <a href=\"http://test.zxy.com\" title=\"http://test.zxy.com\" target=\"_blank\" rel=\"noopener\">http://test.zxy.com</a> 以及 <a href=\"http://second.zxy.com\" title=\"http://second.zxy.com\" target=\"_blank\" rel=\"noopener\">http://second.zxy.com</a> 时地址可能会被302重定向到 <a href=\"http://zxy.com\" title=\"http://zxy.com\" target=\"_blank\" rel=\"noopener\">http:/zxy.com</a> ，这时需要将二级域名的地址解析加进 hosts 文件中：</strong></p>\n<pre><code>attrib -R C:\\WINDOWS\\system32\\drivers\\etc\\hosts\n@echo 127.0.0.1 test.zxy.com &gt;&gt;C:\\WINDOWS\\system32\\drivers\\etc\\hosts\n@echo 127.0.0.1 second.zxy.com &gt;&gt;C:\\WINDOWS\\system32\\drivers\\etc\\hosts\n</code></pre><p>具体操作请回到 <strong><a href=\"#3.7\">3.7 修改本地hosts文件</a></strong></p>\n<p>在往hosts文件中添加完二级域名地址解析后，关闭浏览器，重新打开访问二级域名即可。</p>\n<blockquote>\n<p><em>参考链接：<a href=\"https://blog.csdn.net/LBinin/article/details/70188752\" target=\"_blank\" rel=\"noopener\">配置服务器 —— Nginx添加多个二级子域名</a></em></p>\n</blockquote>\n<h2 id=\"五、Nginx-设置反向代理服务至二级域名下\"><a href=\"#五、Nginx-设置反向代理服务至二级域名下\" class=\"headerlink\" title=\"五、Nginx 设置反向代理服务至二级域名下\"></a><span id=\"5\">五、Nginx 设置反向代理服务至二级域名下</span></h2><p>如果我们在某个端口运行了一个Web应用程序，比如我们在5000端口下有一个静态Web服务器：</p>\n<p><img src=\"https://i.imgur.com/LXzkIML.png\" alt=\"某个静态服务器\"></p>\n<p>那我们可能在实际需求中不被允许通过端口访问这个Web应用程序，比如在微信小程序的开发中，微信小程序不允许接口的地址带有端口号，那么我们就需要将这个应用服务通过 Nginx 的代理模块来将对 Nginx 的请求转发到该内部端口上。</p>\n<p>首先，修改 Nginx 服务下的 nginx.conf</p>\n<pre><code>[root@CentOS ~]# vi /usr/local/nginx/conf/nginx.conf\n</code></pre><p>然后在我们在 <a href=\"#3.6\">3.6 配置Nginx的ssl模块</a> 配置的内容之前添加如下配置（一定要在之前）：</p>\n<pre><code>server {\n\n    listen          443;\n    server_name     porxy.zxy.com;\n\n    location / {\n            proxy_pass http://127.0.0.1:5000;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection &#39;upgrade&#39;;\n            proxy_set_header Host $host;\n            proxy_cache_bypass $http_upgrade;\n    }\n\n}\n</code></pre><p>这时访问 <a href=\"https://proxy.zxy.com\" title=\"https://proxy.zxy.com\" target=\"_blank\" rel=\"noopener\">https://proxy.zxy.com</a> 即可看到 Nginx 代理5000端口下的内容</p>\n<blockquote>\n<p><em>参考链接：<a href=\"https://blog.csdn.net/tujiaw/article/details/70176312?locationNum=10&amp;fps=1\" target=\"_blank\" rel=\"noopener\">nginx配置nodejs服务二级域名</a></em></p>\n</blockquote>\n"},{"title":"Hello World","url":"/2018/06/25/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\" mdui-tooltip=\"{content: 'bash'}\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\" mdui-tooltip=\"{content: 'bash'}\"><code class=\"language-bash\">$ hexo server\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\" mdui-tooltip=\"{content: 'bash'}\"><code class=\"language-bash\">$ hexo generate\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\" mdui-tooltip=\"{content: 'bash'}\"><code class=\"language-bash\">$ hexo deploy\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"}]
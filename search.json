                                                                                                                                                                                                                                                                        [{"title":"CentOS 7上安装配置Nginx","url":"/2018/06/25/CentOS 7上安装配置Nginx/","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1\">一、预备工作</a><ul>\n<li><a href=\"#1.1\">1.1 gcc 安装</a></li>\n<li><a href=\"#1.2\">1.2 PCRE pcre-devel 安装</a></li>\n<li><a href=\"#1.3\">1.3 zlib 安装</a></li>\n<li><a href=\"#1.4\">1.4 OpenSSL 安装</a></li>\n</ul>\n</li>\n<li><a href=\"#2\">二、下载、安装以及配置Nginx服务</a><ul>\n<li><a href=\"#2.1\">2.1 Nginx 下载</a></li>\n<li><a href=\"#2.2\">2.2 Nginx 安装包解压</a></li>\n<li><a href=\"#2.3\">2.3 Nginx 配置</a></li>\n<li><a href=\"#2.4\">2.4 Nginx 编译安装</a></li>\n<li><a href=\"#2.5\">2.5 Nginx 添加进环境变量</a></li>\n<li><a href=\"#2.6\">2.6 Nginx 服务启动与停止</a></li>\n<li><a href=\"#2.7\">2.7 Nginx 开机自启动</a></li>\n</ul>\n</li>\n<li><a href=\"#3\">三、自签名证书配置HTTPS</a><ul>\n<li><a href=\"#3.1\">3.1 创建服务器证书密钥文件</a></li>\n<li><a href=\"#3.2\">3.2 创建服务器证书的申请文件</a></li>\n<li><a href=\"#3.3\">3.3 备份服务器密钥文件</a></li>\n<li><a href=\"#3.4\">3.4 删除密钥文件保护密码</a></li>\n<li><a href=\"#3.5\">3.5 生成证书文件</a></li>\n<li><a href=\"#3.6\">3.6 配置Nginx的ssl模块</a></li>\n<li><a href=\"#3.7\">3.7 修改本地hosts文件</a></li>\n</ul>\n</li>\n<li><a href=\"#4\">四、Nginx 设置HTTP、HTTPS二级域名</a><ul>\n<li><a href=\"#4.1\">4.1 设置HTTP二级域名</a></li>\n<li><a href=\"#4.2\">4.2 设置HTTP二级域名</a></li>\n<li><a href=\"#4.3\">4.3 本地二级域名配置注意事项</a></li>\n</ul>\n</li>\n<li><a href=\"#5\">五、Nginx 设置反向代理服务至二级域名下</a></li>\n</ul>\n<h2 id=\"一、预备工作\"><a href=\"#一、预备工作\" class=\"headerlink\" title=\"一、预备工作\"></a><span id=\"1\">一、预备工作</span></h2><p><strong><span id=\"1.1\">1.1 gcc 安装</span></strong></p>\n<p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：</p>\n<pre><code>yum install gcc-c++\n</code></pre><p><strong><span id=\"1.2\">1.2 PCRE pcre-devel 安装</span></strong></p>\n<p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令：</p>\n<pre><code>yum install -y pcre pcre-devel\n</code></pre><p><strong><span id=\"1.3\">1.3 zlib 安装</span></strong></p>\n<p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</p>\n<pre><code>yum install -y zlib zlib-devel\n</code></pre><p><strong><span id=\"1.4\">1.4 OpenSSL 安装</span></strong></p>\n<p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。</p>\n<pre><code>yum install -y openssl openssl-devel\n</code></pre><h2 id=\"二、下载、安装以及配置Nginx服务\"><a href=\"#二、下载、安装以及配置Nginx服务\" class=\"headerlink\" title=\"二、下载、安装以及配置Nginx服务\"></a><span id=\"2\">二、下载、安装以及配置Nginx服务</span></h2><p><strong><span id=\"2.1\">2.1 Nginx 下载</span></strong></p>\n<p>到<a href=\"https://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">Nginx官网</a>寻找需要下载的tar.gz安装包的链接地址，</p>\n<p><img src=\"https://i.imgur.com/9MFw49G.png\" alt=\"Nginx官网下载列表\"></p>\n<p>使用wget命令下载：</p>\n<pre><code>wget -c https://nginx.org/download/nginx-1.10.3.tar.gz\n</code></pre><p><strong><span id=\"2.2\">2.2 Nginx 安装包解压</span></strong></p>\n<pre><code>tar -zxvf nginx-1.10.3.tar.gz\ncd nginx-1.10.3\n</code></pre><p><strong><span id=\"2.3\">2.3 Nginx 配置</span></strong></p>\n<p>在标准配置安装以外，我们需要开启 <strong>http_ssl_module</strong> 以及 <strong>http_gzip_static_module</strong> 两个模块来开启 https 服务以及 encoding-gzip 传输</p>\n<pre><code>./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_gzip_static_module\n</code></pre><p><strong><span id=\"2.4\">2.4 Nginx 编译安装</span></strong></p>\n<pre><code>make\nmake install\n</code></pre><p>命令执行完成后会默认安装在 <strong>/usr/local/nginx</strong> 中</p>\n<p>或者执行以下命令查找 Nginx 所在文件夹：</p>\n<pre><code>whereis nginx\n</code></pre><p><img src=\"https://i.imgur.com/pzDPXGv.png\" alt=\"whereis nginx\"></p>\n<p><strong><span id=\"2.5\">2.5 Nginx 添加进环境变量</span></strong></p>\n<p>如果上一步提示 nginx 不是一个命令，那就在这一步将 nginx 添加进环境变量中：</p>\n<pre><code>vim /etc/profile\n</code></pre><p>在最后一行加上：</p>\n<pre><code>export PATH=/usr/local/nginx/sbin:$PATH\n</code></pre><p><img src=\"https://i.imgur.com/YV1ZWi2.png\" alt=\"环境变量\"></p>\n<p>此时再次执行nginx将不会报找不到命令了</p>\n<p><strong><span id=\"2.6\">2.6 Nginx 服务启动与停止</span></strong></p>\n<p>服务命令简介：</p>\n<pre><code>nginx                 # 启动服务\nnginx -s quit        # 退出服务，此方式停止步骤是待nginx进程处理任务完毕进行停止\nnginx -s stop        # 停止服务，此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程\nnginx -s reload        # 重载服务\n</code></pre><p>服务<strong>停止操作流程</strong>：</p>\n<pre><code>nginx                # 先开启服务\nnginx -s quit        # 停止服务前先退出服务\nnginx -s stop        # 再停止服务\n</code></pre><p>服务<strong>重启操作流程</strong>：</p>\n<pre><code>nginx                # 先开启服务\nnginx -s quit        # 重启服务前先退出服务\nnginx                # 最后重启服务\n</code></pre><p>服务<strong>重载操作流程</strong>：</p>\n<pre><code>nginx -s reload        # 当 nginx 的配置文件 nginx.conf 被修改后，要想让配置生效需要重启 nginx，使用-s reload不用先停止再启动即可将配置信息在 nginx 中生效\n</code></pre><p>查询nginx进程：</p>\n<pre><code>ps aux|grep nginx\n</code></pre><p><strong><span id=\"2.7\">2.7 Nginx 开机自启动</span></strong></p>\n<p>在 <strong>/etc/rc.local</strong> 中增加启动代码即可：</p>\n<pre><code>vi /etc/rc.local\n</code></pre><p>在文本末尾增加一行 <strong>/usr/local/nginx/sbin/nginx</strong></p>\n<p><img src=\"https://i.imgur.com/R8KxcmA.png\" alt=\"开机自启动\"></p>\n<blockquote>\n<p><em>参考链接：<a href=\"https://www.linuxidc.com/Linux/2016-09/134907.htm\" target=\"_blank\" rel=\"noopener\">CentOS 7 下安装 Nginx</a></em></p>\n</blockquote>\n<h2 id=\"三、自签名证书配置HTTPS\"><a href=\"#三、自签名证书配置HTTPS\" class=\"headerlink\" title=\"三、自签名证书配置HTTPS\"></a><span id=\"3\">三、自签名证书配置HTTPS</span></h2><p><strong><span id=\"3.1\">3.1 创建服务器证书密钥文件</span></strong></p>\n<pre><code>[root@CentOS ~]# cd /usr/local/nginx/conf &amp;&amp; mkdir -p ssl &amp;&amp; cd ssl\n[root@CentOS ssl]# openssl genrsa -des3 -out ca.key 1024\n</code></pre><p>然后填写密钥保护密码：</p>\n<pre><code>Enter PEM pass phrase:                        # 输入密钥保护密码\nVerifying - Enter PEM pass phrase:            # 确认密钥保护密码\n</code></pre><p>回车结束</p>\n<p><strong><span id=\"3.2\">3.2 创建服务器证书的申请文件</span></strong></p>\n<pre><code>[root@CentOS ssl]# openssl req -new -key ca.key -out ca.csr\nEnter pass phrase for root.key:                                                 # 输入前面创建的密码 \nCountry Name (2 letter code) [AU]:CN                                             # 国家代号，中国输入CN \nState or Province Name (full name) [Some-State]:BeiJing                         # 省的全名，拼音 \nLocality Name (eg, city) []:BeiJing                                             # 市的全名，拼音 \nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:MyCompany Corp.         # 公司英文名 \nOrganizational Unit Name (eg, section) []:                                         # 可以不输入 \nCommon Name (eg, YOUR name) []:                                                 # 此时不输入 \nEmail Address []:admin@mycompany.com                                             # 电子邮箱，可随意填\nPlease enter the following ‘extra’ attributes \nto be sent with your certificate request \nA challenge password []:                                                         # 可以不输入 \nAn optional company name []:                                                     # 可以不输入\n</code></pre><p><strong><span id=\"3.3\">3.3 备份服务器密钥文件</span></strong></p>\n<pre><code>[root@CentOS ssl]# cp ca.key ca.key.backup\n</code></pre><p><strong><span id=\"3.4\">3.4 删除密钥文件保护密码</span></strong></p>\n<pre><code>[root@CentOS ssl]# openssl rsa -in ca.key.backup -out ca.key\n</code></pre><p><strong><span id=\"3.5\">3.5 生成证书文件</span></strong></p>\n<pre><code>[root@CentOS ssl]# openssl x509 -req -days 365 -in ca.csr -signkey ca.key -out ca.crt\n</code></pre><p><strong><span id=\"3.6\">3.6 配置Nginx的ssl模块</span></strong></p>\n<p>修改 Nginx 服务下的 nginx.conf</p>\n<pre><code>[root@CentOS ~]# vi /usr/local/nginx/conf/nginx.conf\n</code></pre><p>然后在 # HTTPS server 下将原有的 server 修改如下：</p>\n<pre><code>server {\n    listen       443 default ssl;\n    server_name  zxy.com;\n\n    ssl     on;\n\n    ssl_certificate      /home/yg-zxy/ssl-file/ssl-30-server.crt;\n    ssl_certificate_key  /home/yg-zxy/ssl-file/ssl-30-server.key;\n\n    location / {\n        root   html;\n        index  index.html index.htm;\n    }\n}\n</code></pre><p><strong><em>Tips：</em></strong></p>\n<p><strong>listen:</strong> 设置ssl监听端口，默认设置443即可，default可以省略</p>\n<p><strong>server_name:</strong> 设置服务器域名，这里配合接下来介绍到的修改hosts文件可以做到通过域名访问，域名随意设置，比如 <strong>zxy.com</strong></p>\n<p><strong>ssl:</strong> 开启ssl模块</p>\n<p><strong>ssl_certificate:</strong> 证书、公钥，需要发送到客户端的</p>\n<p><strong>ssl_certificate_key:</strong> 私钥</p>\n<p><strong>location:</strong> 服务器路由匹配配置</p>\n<p><strong><span id=\"3.7\">3.7 修改本地hosts文件</span></strong></p>\n<p>ssl证书设置好了，但是想要验证https能不能访问则得需要域名才行。</p>\n<p>当然我们不一定真的要去买一个域名来验证，可以通过修改本地hosts文件的方式来拦截、修改本地的域名解析过程：</p>\n<p><strong>Windows平台：</strong></p>\n<pre><code>attrib -R C:\\WINDOWS\\system32\\drivers\\etc\\hosts\n@echo 127.0.0.1 zxy.com &gt;&gt;C:\\WINDOWS\\system32\\drivers\\etc\\hosts\n@echo 127.0.0.1 www.zxy.com &gt;&gt;C:\\WINDOWS\\system32\\drivers\\etc\\hosts\n</code></pre><p>在本地新建一个文本文档，然后将这两行代码复制到文本文档中，另存为 <strong>changeHosts.bat</strong></p>\n<p>然后双击（可能需要右击管理员权限运行）执行 <strong>changeHosts.bat</strong> 文件</p>\n<p>等到CMD窗口执行完成以后，即可在浏览器访问 <a href=\"https://zxy.com\" title=\"https://zxy.com\" target=\"_blank\" rel=\"noopener\">https://zxy.com</a></p>\n<p><strong>Linux平台：</strong></p>\n<p><em>root用户：</em></p>\n<pre><code>[root@CentOS ~]# vi /etc/hosts\n</code></pre><p><em>非root用户：</em></p>\n<pre><code>[user@CentOS ~]# sudo vi /etc/hosts\n[sudo] password for user:                    # 输入当前用户的密码\n</code></pre><p>然后在文末添加一行： <strong>127.0.0.1 zxy.com</strong></p>\n<pre><code>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n\n127.0.0.1   zxy.com\n127.0.0.1    www.zxy.com\n</code></pre><p>保存然后退出</p>\n<blockquote>\n<p><strong>Tips: 修改host的操作一定要在访问的主机上进行，而不是被访问的服务器上进行</strong></p>\n</blockquote>\n<p><strong>在本地（浏览器）访问 <a href=\"https://zxy.com\" title=\"https://zxy.com\" target=\"_blank\" rel=\"noopener\">https://zxy.com</a> 时会遇到如下问题：</strong></p>\n<p><img src=\"https://i.imgur.com/vd0x2Zx.png\" alt=\"证书不安全\"></p>\n<p>提示你访问的地址不安全，这是因为我们的ssl证书是我们自己创建的，并未经过任何可信的第三方认证。所以浏览器会告诉用户，这个证书是未经可信第三方认证的证书，会有风险。但是在正式的公网环境中，我们肯定是需要取得可信第三方认证的DV或者EV证书的</p>\n<p>我们点击“高级”，继续点击“<a href=\"https://zxy.com\" target=\"_blank\" rel=\"noopener\">继续前往zxy.com（不安全）</a>”即可</p>\n<p><img src=\"https://i.imgur.com/WKPr9kT.png\" alt=\"继续访问\"></p>\n<blockquote>\n<p><em>参考链接：<a href=\"https://www.cnblogs.com/eaglezb/p/6074811.html\" target=\"_blank\" rel=\"noopener\">Nginx配置 HTTPS 证书网站</a></em></p>\n</blockquote>\n<h2 id=\"四、Nginx-设置HTTP、HTTPS二级域名\"><a href=\"#四、Nginx-设置HTTP、HTTPS二级域名\" class=\"headerlink\" title=\"四、Nginx 设置HTTP、HTTPS二级域名\"></a><span id=\"4\">四、Nginx 设置HTTP、HTTPS二级域名</span></h2><p><strong><span id=\"4\">4.1 设置HTTP二级域名</span></strong></p>\n<p>修改 Nginx 服务下的 nginx.conf</p>\n<pre><code>[root@CentOS ~]# vi /usr/local/nginx/conf/nginx.conf\n</code></pre><p>将http中server的内容：</p>\n<pre><code>server {\n    listen 80;\n    server_name zxy.com;\n\n    location / {\n        root   html;\n        index  index.html index.htm;\n    }\n}\n</code></pre><p>修改为二级域名正则通配形式：</p>\n<pre><code>server {\n    listen 80;\n    server_name zxy.com;\n\n    if ( $host ~* (\\b(?!www\\b)\\w+)\\.\\w+\\.\\w+ ) {\n        set $subdomain /$1;\n    }\n    location / {\n        root html$subdomain;\n        index index.html index.htm;\n    }\n}\n</code></pre><p>以这种方式配置二级域名的好处就是不需要再单独配置其他二级域名了，只需要在 <strong>/usr/local/nginx/html</strong> 下创建响应的文件夹即可访问相应的二级域名。</p>\n<p>检测 Nginx 服务配置是否正确：</p>\n<pre><code>[root@CentOS ~]# nginx -t\nnginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok\nnginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful\n</code></pre><p>然后重载 Nginx 服务：</p>\n<pre><code>[root@CentOS ~]# nginx -s reload\n</code></pre><p>创建二级域名所属的文件夹（需要root权限）：</p>\n<pre><code>[root@CentOS ~]# cd /usr/local/nginx/html &amp;&amp; mkdir -p test &amp;&amp; cd test\n[root@CentOS test]# vi index.html\n</code></pre><p>给首页文件输入内容：</p>\n<pre><code>Hello! This is a test page!\n</code></pre><p>保存并退出</p>\n<p>这时访问 <a href=\"http://test.zxy.com\" title=\"http://test.zxy.com\" target=\"_blank\" rel=\"noopener\">http://test.zxy.com</a> 即可看到刚刚编写的内容</p>\n<p><img src=\"https://i.imgur.com/MfzspQ3.png\" alt=\"访问test二级域名\"></p>\n<p>如果我们需要配置另一个二级域名 <a href=\"http://second.zxy.co\" title=\"http://second.zxy.com\" target=\"_blank\" rel=\"noopener\">http://second.zxy.com</a> 的话，可以直接在 html 文件夹中创建相应的二级域名所属文件夹：</p>\n<pre><code>[root@CentOS test]# cd /usr/local/nginx/html &amp;&amp; mkdir -p second &amp;&amp; cd second\n[root@CentOS second]# vi index.html\nHello! This is second subdomain!\n</code></pre><p>保存并退出</p>\n<p>这时访问 <a href=\"http://second.zxy.com\" title=\"http://second.zxy.com\" target=\"_blank\" rel=\"noopener\">http://second.zxy.com</a> 即可看到新域名下的内容</p>\n<blockquote>\n<p>*如有问题请参考：<strong><a href=\"#4.3\">4.3 本地二级域名配置注意事项</a></strong></p>\n</blockquote>\n<p><strong><span id=\"4.2\">4.2 设置HTTP二级域名</span></strong></p>\n<p>修改 Nginx 服务下的 nginx.conf</p>\n<pre><code>[root@CentOS ~]# vi /usr/local/nginx/conf/nginx.conf\n</code></pre><p>将我们在 <a href=\"#3.6\">3.6 配置Nginx的ssl模块</a> 中配置的内容修改为如下配置：</p>\n<pre><code>server {\n    listen       443 default ssl;\n    server_name  zxy.com;\n\n    ssl     on;\n\n    ssl_certificate      /home/yg-zxy/ssl-file/ssl-30-server.crt;\n    ssl_certificate_key  /home/yg-zxy/ssl-file/ssl-30-server.key;\n\n    if ( $host ~* (\\b(?!www\\b)\\w+)\\.\\w+\\.\\w+ ) {\n        set $subdomain $1;\n    }\n\n    location / {\n        root   html/$subdomain;\n        index  index.html index.htm;\n    }\n}\n</code></pre><p>保存并退出</p>\n<p>这时访问 <a href=\"https://test.zxy.com\" title=\"https://test.zxy.com\" target=\"_blank\" rel=\"noopener\">https://test.zxy.com</a> 以及 <a href=\"https://second.zxy.com\" title=\"https://second.zxy.com\" target=\"_blank\" rel=\"noopener\">https://second.zxy.com</a> 即可看到HTTPS域名下的内容</p>\n<blockquote>\n<p>*如有问题请参考：<strong><a href=\"#4.3\">4.3 本地二级域名配置注意事项</a></strong></p>\n</blockquote>\n<p><strong><span id=\"4.3\">4.3 本地二级域名配置注意事项</span></strong></p>\n<p><strong><em>注意！！！</em></strong></p>\n<p><strong>有可能在访问 <a href=\"http://test.zxy.com\" title=\"http://test.zxy.com\" target=\"_blank\" rel=\"noopener\">http://test.zxy.com</a> 以及 <a href=\"http://second.zxy.com\" title=\"http://second.zxy.com\" target=\"_blank\" rel=\"noopener\">http://second.zxy.com</a> 时地址可能会被302重定向到 <a href=\"http://zxy.com\" title=\"http://zxy.com\" target=\"_blank\" rel=\"noopener\">http:/zxy.com</a> ，这时需要将二级域名的地址解析加进 hosts 文件中：</strong></p>\n<pre><code>attrib -R C:\\WINDOWS\\system32\\drivers\\etc\\hosts\n@echo 127.0.0.1 test.zxy.com &gt;&gt;C:\\WINDOWS\\system32\\drivers\\etc\\hosts\n@echo 127.0.0.1 second.zxy.com &gt;&gt;C:\\WINDOWS\\system32\\drivers\\etc\\hosts\n</code></pre><p>具体操作请回到 <strong><a href=\"#3.7\">3.7 修改本地hosts文件</a></strong></p>\n<p>在往hosts文件中添加完二级域名地址解析后，关闭浏览器，重新打开访问二级域名即可。</p>\n<blockquote>\n<p><em>参考链接：<a href=\"https://blog.csdn.net/LBinin/article/details/70188752\" target=\"_blank\" rel=\"noopener\">配置服务器 —— Nginx添加多个二级子域名</a></em></p>\n</blockquote>\n<h2 id=\"五、Nginx-设置反向代理服务至二级域名下\"><a href=\"#五、Nginx-设置反向代理服务至二级域名下\" class=\"headerlink\" title=\"五、Nginx 设置反向代理服务至二级域名下\"></a><span id=\"5\">五、Nginx 设置反向代理服务至二级域名下</span></h2><p>如果我们在某个端口运行了一个Web应用程序，比如我们在5000端口下有一个静态Web服务器：</p>\n<p><img src=\"https://i.imgur.com/LXzkIML.png\" alt=\"某个静态服务器\"></p>\n<p>那我们可能在实际需求中不被允许通过端口访问这个Web应用程序，比如在微信小程序的开发中，微信小程序不允许接口的地址带有端口号，那么我们就需要将这个应用服务通过 Nginx 的代理模块来将对 Nginx 的请求转发到该内部端口上。</p>\n<p>首先，修改 Nginx 服务下的 nginx.conf</p>\n<pre><code>[root@CentOS ~]# vi /usr/local/nginx/conf/nginx.conf\n</code></pre><p>然后在我们在 <a href=\"#3.6\">3.6 配置Nginx的ssl模块</a> 配置的内容之前添加如下配置（一定要在之前）：</p>\n<pre><code>server {\n\n    listen          443;\n    server_name     porxy.zxy.com;\n\n    location / {\n            proxy_pass http://127.0.0.1:5000;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection &#39;upgrade&#39;;\n            proxy_set_header Host $host;\n            proxy_cache_bypass $http_upgrade;\n    }\n\n}\n</code></pre><p>这时访问 <a href=\"https://proxy.zxy.com\" title=\"https://proxy.zxy.com\" target=\"_blank\" rel=\"noopener\">https://proxy.zxy.com</a> 即可看到 Nginx 代理5000端口下的内容</p>\n<blockquote>\n<p><em>参考链接：<a href=\"https://blog.csdn.net/tujiaw/article/details/70176312?locationNum=10&amp;fps=1\" target=\"_blank\" rel=\"noopener\">nginx配置nodejs服务二级域名</a></em></p>\n</blockquote>\n"},{"title":"如何建站（三） - 在Ubuntu 16.04上搭建Web环境（LAMP）","url":"/2018/06/25/如何建站（三） - 在Ubuntu 16.04上搭建Web环境（LAMP）/","content":"<p><em>接下来我们开始在服务器上搭建Web环境</em></p>\n<p>在Linux上Web环境主要境分为LAMP和LNMP两种：</p>\n<ul>\n<li>LAMP 是指Linux + Apache + Mysql +PHP</li>\n<li>LNMP 是指Linux + Nginx + Mysql + PHP （如果要在StackOverflow等外文社区搜索相关资料请用LEMP）</li>\n</ul>\n<p>两者的区别在于Apache是重量级的，且对PHP友好的。如果你的后台处理语言更多的是使用PHP，那么就选择LAMP是最好的。而Nginx是轻量级的，对静态资源友好的。如果你的网站更多的只是静态资源，那么选择LNMP绝对没错。</p>\n<p>两者环境的搭建大同小异，接下来本文主要介绍LAMP的搭建。</p>\n<h5 id=\"更新Ubuntu软件库\"><a href=\"#更新Ubuntu软件库\" class=\"headerlink\" title=\"更新Ubuntu软件库\"></a>更新Ubuntu软件库</h5><p>在搭建LAMP环境前，我们为了保险起见，先更新一下软件库：</p>\n<pre>zxy@zxy-MIBook:~$ sudo apt update</pre>\n\n<h5 id=\"安装Apache2\"><a href=\"#安装Apache2\" class=\"headerlink\" title=\"安装Apache2\"></a>安装Apache2</h5><p>也可以安装Apache最原始的版本，但是本文建议安装Apache2，包括这步操作之后的Mysql以及PHP相关依赖都是基于Apache2的。所以<strong>如果你非要安装Apache原始版本的话，本文不能保证安装的顺利</strong>。</p>\n<pre>zxy@zxy-MIBook:~$ sudo apt install apache2</pre>\n\n<h5 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h5><p>在浏览器地址栏中输入localhost，如果打开显示了Apache2，那么这一步配置成功！</p>\n<h5 id=\"安装PHP\"><a href=\"#安装PHP\" class=\"headerlink\" title=\"安装PHP\"></a>安装PHP</h5><p>这里安装的PHP的版本是7.0，因为Ubuntu 16.04默认支持PHP7.0，如果安装PHP5就会报错。<br><em>不信。。。你可以试一试。。。</em></p>\n<pre>zxy@zxy-MIBook:~$ sudo apt install php \nzxy@zxy-MIBook:~$ sudo apt install libapache2-mod-php </pre>\n\n<h5 id=\"验证-1\"><a href=\"#验证-1\" class=\"headerlink\" title=\"验证\"></a>验证</h5><pre>zxy@zxy-MIBook:~$ cd /var/www/html\nzxy@zxy-MIBook:~$ sudo vim info.php</pre>\n\n<p>在info.php中输入：</p>\n<pre><?php \nphpinfo();\n ?></pre>\n\n<p>然后保存文件（:wq!）退出<br>再在浏览器地址栏里输入localhost/info.php，如果出现PHP的配置信息，那么这一步配置成功！</p>\n<h5 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h5><pre>zxy@zxy-MIBook:~$ sudo apt install mysql-server php7.0-mysql\nzxy@zxy-MIBook:~$ sudo apt-get install mysql-client\n      // <!--  /*  这是注释：这里会让你设置Mysql的密码  */ --> \n\nzxy@zxy-MIBook:~$ mysql_secure_installation \n      // <!--  /*  这是注释：这一项可以不用设置  */ --> </pre>\n\n<h5 id=\"安装PHPMyadmin\"><a href=\"#安装PHPMyadmin\" class=\"headerlink\" title=\"安装PHPMyadmin\"></a>安装PHPMyadmin</h5><pre>zxy@zxy-MIBook:~$ sudo apt-get install phpmyadmin\nzxy@zxy-MIBook:~$ sudo apt-get install php-mbstring\n      // <!--  /*  这是注释：这一步非常非常重要！千万别漏！  */ -->\nzxy@zxy-MIBook:~$ sudo apt-get install php-gettext\nzxy@zxy-MIBook:~$ sudo ln -s /usr/share/phpmyadmin /var/www/html/phpmyadmin\n      // <!--  /*  这是注释：把phpmyadmin链接到Apache的默认目录/var/www/html下  */ --></pre>\n\n<h5 id=\"配置PHPMyadmin\"><a href=\"#配置PHPMyadmin\" class=\"headerlink\" title=\"配置PHPMyadmin\"></a>配置PHPMyadmin</h5><pre>zxy@zxy-MIBook:~$ vim /etc/php/7.0/apache2/php.ini </pre>\n\n<p>打开了php.ini后，在文件里面找到以下几行：<br><strong>display_errors = Off</strong> 改为：<br><strong>display_errors = On</strong> (显示错误日志，文件中出现的都要改，除非是注释，不然无效)</p>\n<p><strong>;extension=php_mbstring.dll</strong> 改为：<br><strong>extension=php_mbstring.dll</strong> (也就是取消注释，为了开启mbstring)  </p>\n<p>php.ini文件改动好了以后就重启Apache2服务：</p>\n<pre>zxy@zxy-MIBook:~$ /etc/init.d/apache2 restart </pre>\n\n<h5 id=\"验证-2\"><a href=\"#验证-2\" class=\"headerlink\" title=\"验证\"></a>验证</h5><p>在浏览器地址栏中输入localhost/phpmyadmin，如果显示PHPMyadmin登录界面，那么这一步配置成功！</p>\n<p>那么所有的步骤配置完成了，你的本地Web服务器也就配置完成了，你就可以尽情地被它蹂躏了！（斜眼笑）</p>\n<p>-完-</p>\n<p>See U Next Chapter!<br>@转载请说明出处，谢谢！</p>\n"},{"title":"如何建站（一） - 建站必备知识及域名与服务器的购买","url":"/2018/06/25/如何建站（一） - 建站必备知识及域名与服务器的购买/","content":"<h1 id=\"一、序言\"><a href=\"#一、序言\" class=\"headerlink\" title=\"一、序言\"></a>一、序言</h1><h2 id=\"1-1-明确你的建站目的\"><a href=\"#1-1-明确你的建站目的\" class=\"headerlink\" title=\"1. 1 明确你的建站目的\"></a>1. 1 明确你的建站目的</h2><p><strong>— 写在最前：这是写给小白的建站指南，大神可以来尽情践踏</strong></p>\n<p>&#160; &#160; &#160; &#160;本篇主要介绍的是如何搭建个人网站，如果只是单纯想搭建个人博客的话，可以通过<strong>Github + Hexo</strong>（不需要购买服务器） 、 <strong>Xampp + WordPress</strong>（可购买服务器也可以不购买） 等方式搭建。</p>\n<p>&#160; &#160; &#160; &#160;你可以在网上搜索相关教程，我在这里推荐以下几个教程地址：</p>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/23934523\" target=\"_blank\" rel=\"noopener\">如何用Github搭建个人博客</a></li>\n<li><a href=\"http://blog.csdn.net/jzooo/article/details/46781805\" target=\"_blank\" rel=\"noopener\">零基础免费搭建个人博客-hexo+github</a></li>\n<li><a href=\"http://jingyan.baidu.com/article/f71d60376ba9571ab641d117.html\" target=\"_blank\" rel=\"noopener\">用XAMPP来搭建Wordpress建站环境</a></li>\n</ul>\n<p>&#160; &#160; &#160; &#160;如果你不知道个人博客和我说的狭义的网站这两者的区别，这里给出Examples：</p>\n<ul>\n<li><a href=\"http://baixin.io/\" target=\"_blank\" rel=\"noopener\">潘柏信 - 个人站</a> （Hexo搭建的个人博客）</li>\n<li>所有你能看到的官网首页（公司官网，门户网站，论坛等）</li>\n</ul>\n<p>&#160; &#160; &#160; &#160;其实这两者的主要区别在于我所说的个人博客主要是功能单一的独立博客而已，因为<strong>如果你只是想搭建这样一个博客的话，没有必要购买服务器去搭建。Github + Hexo已经可以很好的帮你完成你的想法了</strong>。</p>\n<p>&#160; &#160; &#160; &#160;如果你不想记住一长串类似于“<a href=\"http://XXX（你的Github账户名）.github.io/”的地址的话，你可以单独买一个域名然后解析到这个地址对应的IP地址即可。具体操作这里不多说，可根据以上教程走。\" target=\"_blank\" rel=\"noopener\">http://XXX（你的Github账户名）.github.io/”的地址的话，你可以单独买一个域名然后解析到这个地址对应的IP地址即可。具体操作这里不多说，可根据以上教程走。</a></p>\n<p>&#160; &#160; &#160; &#160;当然，我说的这种区别可能不太恰当。但是我这么举例主要是想让大家明白自己大概是想成做什么样的东西。</p>\n<h2 id=\"1-2-选择搭建个人网站的方式\"><a href=\"#1-2-选择搭建个人网站的方式\" class=\"headerlink\" title=\"1. 2 选择搭建个人网站的方式\"></a>1. 2 选择搭建个人网站的方式</h2><p>&#160; &#160; &#160; &#160;在公网建设个人网站的方式有两种：</p>\n<p>&#160; &#160; &#160; &#160;<strong>a. 通过个人电脑搭配公网IP建站</strong></p>\n<p>&#160; &#160; &#160; &#160;<strong>b. 通过购买虚拟主机、VPS、云服务器等建站</strong></p>\n<p>&#160; &#160; &#160; &#160;这两种方式的主要区别在于：</p>\n<ul>\n<li>第一种方式不需要购买服务器（关于服务器的介绍与区别会在之后小节进行）；</li>\n<li>第二种方式需要购买服务器，然后通过shell或者远程登录控制服务器搭建网站。</li>\n</ul>\n<p>&#160; &#160; &#160; &#160;第一种搭建网站的方式我个人觉得比较麻烦，需要用到花生壳内网穿透这种软件，不过更主要的原因是……反正我没成功过……嗯，对，所以我选了第二种。</p>\n<p>&#160; &#160; &#160; &#160;同样的，这里给大家推荐：</p>\n<ul>\n<li><a href=\"http://jingyan.baidu.com/article/d45ad148fb96f269552b809f.html\" target=\"_blank\" rel=\"noopener\">如何让外网访问本地服务器？</a></li>\n</ul>\n<p>&#160; &#160; &#160; &#160;当然，这个前提是你要会搭建本地服务器（Xampp/Appserv/WampServer等）。如果不能解决的话，同样可以去问问神奇的度娘。。。</p>\n<p>&#160; &#160; &#160; &#160;第二种搭建网站的方式我非常喜欢，为什么呢？有以下几个原因：</p>\n<ul>\n<li>相当于又有了一台电脑，只不过不在身边</li>\n<li>可以想怎么改建网站就怎么改，只要愿意写代码</li>\n<li><strong>如果你购买的是国外的服务器，还可以用pptpd来搭建属于自己的VPN</strong></li>\n</ul>\n<p>&#160; &#160; &#160; &#160;很明显，第三条是很吸引人的。因为我建站的费用每年是 25（域名） + 460（虚拟专用服务器），而我相当于有了 <strong>一个网站</strong> + <strong>一个VPN</strong>。但是这个VPN我目前不能做代理，因为ping的延迟太高（将近200），所以也就是用来刷刷脸书，逛逛Youtube（偶尔膜一膜，坏笑.jpg）。</p>\n<p>&#160; &#160; &#160; &#160;好了，废话了这么多，那么，我们终于可以进入主题了！！！</p>\n<h1 id=\"二、建站准备工作\"><a href=\"#二、建站准备工作\" class=\"headerlink\" title=\"二、建站准备工作\"></a>二、建站准备工作</h1><h2 id=\"2-1-域名选购\"><a href=\"#2-1-域名选购\" class=\"headerlink\" title=\"2. 1 域名选购\"></a>2. 1 域名选购</h2><p>&#160; &#160; &#160; &#160;相信大家建站之前都有了解过域名服务商和分销商有哪些，国内比较有名的比如：<a href=\"https://wanwang.aliyun.com/?spm=5176.8142029.388261.25.VhY7E7\" target=\"_blank\" rel=\"noopener\">阿里云（万网）</a>、<a href=\"https://cloud.baidu.com/product/bcd.html\" target=\"_blank\" rel=\"noopener\">百度云</a>、<a href=\"https://dnspod.qcloud.com/?from=qcloud\" target=\"_blank\" rel=\"noopener\">腾讯云</a>、<a href=\"http://www.ename.com/\" target=\"_blank\" rel=\"noopener\">易名中国</a>、<a href=\"http://www.xinnet.com/\" target=\"_blank\" rel=\"noopener\">新网</a>等，这里我不做好坏评价，毕竟我也没用过。</p>\n<p>&#160; &#160; &#160; &#160;我用的是<a href=\"https://cloud.baidu.com/product/bcd.html\" target=\"_blank\" rel=\"noopener\">百度云</a>的域名服务购买的 .top 域名，另外知乎上也有推荐国外的域名服务商，例如：<a href=\"https://www.hostinger.com.hk/\" target=\"_blank\" rel=\"noopener\">Hostinger中国</a>（Hostinger提供免费的微容量共享服务器，当然效果不是很好）、<a href=\"https://sg.godaddy.com/zh/\" target=\"_blank\" rel=\"noopener\">GoDaddy</a>、<a href=\"http://www.usdomaincenter.com/\" target=\"_blank\" rel=\"noopener\">USDomainCenter</a>等。</p>\n<p>&#160; &#160; &#160; &#160;有些人购买域名的时候会比较犹豫，不知道买怎样的域名比较好。其实没什么犹豫纠结的，稍微有点钱就上 .com 域名，没钱就买那些好记一点的，比如我选的 .top 域名。我们之所以不通过服务器的IP访问服务器，不就是因为IP太难记了吗？如果你买个域名是 像dsjaoifj.xyz 这种的，那跟通过IP访问的难度有什么不同呢？所以，只要域名好记，就可以了。</p>\n<h2 id=\"2-2-服务器选购\"><a href=\"#2-2-服务器选购\" class=\"headerlink\" title=\"2. 2 服务器选购\"></a>2. 2 服务器选购</h2><p>&#160; &#160; &#160; &#160;少部分的域名服务商会同时提供服务器的购买服务，例如国内<a href=\"https://wanwang.aliyun.com/\" target=\"_blank\" rel=\"noopener\">阿里云</a>、<a href=\"https://cloud.baidu.com/product/bcd.html\" target=\"_blank\" rel=\"noopener\">百度云</a>之类的。那么这里就要提到服务器的种类和区别了。</p>\n<p>&#160; &#160; &#160; &#160;服务器可以分为以下几类：</p>\n<blockquote>\n<p>&#160; &#160; &#160; &#160;<strong>a.独立服务器</strong></p>\n<p>&#160; &#160; &#160; &#160;顾名思义，就是一个躺在机房的实实在在的物理服务器，也可理解为你的游戏主机一样。</p>\n<p>&#160; &#160; &#160; &#160;<em>优点：性能高</em></p>\n<p>&#160; &#160; &#160; &#160;<em>缺点：价格高，高可用性低（比如断电，硬盘坏了……）</em></p>\n<p>&#160; &#160; &#160; &#160;<strong>b.VPS（Virtual Private Server）</strong></p>\n<p>&#160; &#160; &#160; &#160;虚拟专用服务器，一般是将一个独立服务器通过虚拟化技术虚拟成多个虚拟专用服务器。</p>\n<p>&#160; &#160; &#160; &#160;<em>优点：价格便宜</em></p>\n<p>&#160; &#160; &#160; &#160;<em>缺点：性能低，高可用性低（除了其所在的物理机出问题了会收到影响，虚拟化技术出问题也会收到影响）</em></p>\n<p>&#160; &#160; &#160; &#160;<strong>c.云服务器</strong></p>\n<p>&#160; &#160; &#160; &#160;Elastic Compute Service, 简称ECS 好多人理解云服务器和VPS一样，更有甚者说以前的VPS现在的说法就是云服务器，其实不然，云服务器是一个计算，网络，存储的组合。简单点说就是通过多个CPU，内存，硬盘组成的计算池和存储池和网络的组合。</p>\n<p>&#160; &#160; &#160; &#160;<em>优点：价格适中，使用灵活，高可用性（单个或多个物理离线不会对整个服务造成太大的影响）</em></p>\n<p>&#160; &#160; &#160; &#160;<em>缺点：性能相对较低</em></p>\n<p>&#160; &#160; &#160; &#160;<strong>d.虚拟主机</strong></p>\n<p>&#160; &#160; &#160; &#160;Virtual hosts （Vhost）虚拟主机是通过，物理服务器，VPS或者云服务器安装例如CPanel，Plesk等面板搭建的。虚拟主机市场比较混乱，不同的厂商价格一般会有很大的差异，一般来说看一个虚拟主机的好坏可以从以下几点来看，主机系统：CloudLinux 更适合多租户虚拟主机，CPanel，Plesk 面板在市场上最受市场欢迎，一般来说价格相对较贵，使用云服务器最好（比如阿里云），物理服务器也可，一般不选择VPS作为虚拟主机的服务器。</p>\n<p>&#160; &#160; &#160; &#160;<em>优点：价格低，使用方便</em></p>\n<p>&#160; &#160; &#160; &#160;<em>缺点：一般来说只能做网站，或应用后端服务器，市场杂乱比较难选购</em></p>\n<p>&#160; &#160; &#160; &#160;<strong>总结：如过只是做一个小网站，个人博客等用虚拟主机就可，大点的应用建议用云服务器。</strong></p>\n</blockquote>\n<p><em>转自：<a href=\"https://www.zhihu.com/question/25507629/answer/105594087\" target=\"_blank\" rel=\"noopener\">万网提供的云服务器和虚拟主机的区别是什么？</a> 来源：知乎@张朝权</em></p>\n<p>&#160; &#160; &#160; &#160;一波介绍后，大家可以根据自身的需求购买服务器。</p>\n<p>&#160; &#160; &#160; &#160;因为我只是想建个个人网站玩一玩，需求不高，所以我在<a href=\"https://www.hostpark.cn/\" target=\"_blank\" rel=\"noopener\">主机公园</a>买了一个位于美国洛杉矶的VPS，一年价格450左右。</p>\n<p>&#160; &#160; &#160; &#160;<em>令人因却思婷的是，我购买服务器的那个网站——<a href=\"https://www.hostpark.cn/\" target=\"_blank\" rel=\"noopener\">主机公园</a>，正是我上面引用的那段话的作者——张朝权所在的服务商。（= = 这真的是个意外。。。）</em></p>\n<p>&#160; &#160; &#160; &#160;当然，选购服务器肯定要比选购域名纠结得多，在这里给大家介绍几种方法：</p>\n<ul>\n<li>在知乎上或者教程上看别人的推荐</li>\n<li>找你看过的比较好的网站对应的服务器供应商</li>\n<li>多问服务器供应商的客服</li>\n</ul>\n<p>&#160; &#160; &#160; &#160;这几种方法都会比较有效果，第一种不多说，毕竟是用过的人推荐的；第二种我等会儿就会介绍两个工具给大家详细介绍；第三种则是遵循了“<strong>鼻子底下就是路</strong>”的原则。。。</p>\n<p>&#160; &#160; &#160; &#160;那么在介绍第二种方法的同时，给大家介绍两个工具：<strong><a href=\"http://tool.chinaz.com/dns\" target=\"_blank\" rel=\"noopener\">DNS检测</a></strong>和<strong>命令提示符</strong>。</p>\n<p>&#160; &#160; &#160; &#160;<strong>如果我看到过一个大神的网站很好，很想做一个跟他差不多的网站，但是我不知道他买的是哪家的服务器怎么办？</strong></p>\n<p>&#160; &#160; &#160; &#160;那就用<a href=\"http://tool.chinaz.com/dns\" target=\"_blank\" rel=\"noopener\">DNS检测</a>查一下。比如说我曾经看到过<a href=\"http://www.miaoqiyuan.cn/\" target=\"_blank\" rel=\"noopener\">苗启源的部落格</a>（网址：<a href=\"http://www.miaoqiyuan.cn），我想用跟他一样的服务器，那么我就可以把他的域名\" target=\"_blank\" rel=\"noopener\">www.miaoqiyuan.cn），我想用跟他一样的服务器，那么我就可以把他的域名</a> <em>miaoqiyuan.cn</em> 放进<a href=\"http://tool.chinaz.com/dns\" target=\"_blank\" rel=\"noopener\">DNS检测</a>查询一下：</p>\n<p><img src=\"http://i.imgur.com/ahVErB6.png\" alt=\"查询 *miaoqiyuan.cn* 的服务器供应商\"></p>\n<p>&#160; &#160; &#160; &#160;在图中可以看到响应IP对应的是 <em>河南省郑州市 景安BGP数据中心</em>，那么我们就可以去百度这个供应商了：</p>\n<p><img src=\"http://i.imgur.com/ahVErB6.png\" alt=\"查询 *miaoqiyuan.cn* 的服务器供应商\"></p>\n<p>&#160; &#160; &#160; &#160;<strong>如果我想知道我看中的这个服务器好不好，速度快不快，适不适合做代理呢？</strong></p>\n<p>&#160; &#160; &#160; &#160;那么我们就可以用 <em>命令提示符</em> 长Ping来观察：</p>\n<pre><code>    ping -t miaoqiyuan.cn\n</code></pre><p><img src=\"http://i.imgur.com/ahVErB6.png\" alt=\"查询 *miaoqiyuan.cn* 的服务器供应商\"></p>\n<p>&#160; &#160; &#160; &#160;这里刚好ping到了特殊情况，说明 <em>miaoqiyuan.cn</em> 服务器是用SVN搭建的，从外网访问服务器需要用到类似<a href=\"http://hsk.oray.com/\" target=\"_blank\" rel=\"noopener\">花生壳</a>的软件。那刚好来给大家看下我自己的服务器：</p>\n<p><img src=\"http://i.imgur.com/ahVErB6.png\" alt=\"查询 *miaoqiyuan.cn* 的服务器供应商\"></p>\n<p>&#160; &#160; &#160; &#160;可以看到我的服务器时延较长，但是长时间Ping并未出现丢包（<em>Request timed out</em>）的情况。说明服务器稳定性是可以的，但是不适合做代理，因为时延较高。特别像游戏代理的话，300ms的Ping值是会让人抓狂的。</p>\n<p>&#160; &#160; &#160; &#160;好了，写到了这里，相信大家也都准备去买域名和服务器了。下一篇我将说说买好了域名和服务器以后具体该怎么搭建网站了。</p>\n<p>See U Next Chapter!</p>\n"},{"title":"Hello World","url":"/2018/06/25/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\" mdui-tooltip=\"{content: 'bash'}\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\" mdui-tooltip=\"{content: 'bash'}\"><code class=\"language-bash\">$ hexo server\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\" mdui-tooltip=\"{content: 'bash'}\"><code class=\"language-bash\">$ hexo generate\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\" mdui-tooltip=\"{content: 'bash'}\"><code class=\"language-bash\">$ hexo deploy\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"}]